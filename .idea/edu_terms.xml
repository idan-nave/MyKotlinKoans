<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="TermsProjectSettings">
    <currentTermsLanguage>en</currentTermsLanguage>
    <terms>
      <map>
        <entry key="en">
          <value>
            <map>
              <entry key="234720">
                <value>
                  <list>
                    <Term value="Functions" definition="In Kotlin, a function is a block of code designed to perform a specific task. It can be defined with a 'fun' keyword followed by its name and body." />
                    <Term value="function" definition="In Kotlin, a function is a block of code designed to perform a specific task. It can be defined with a 'fun' keyword followed by its name and body." />
                    <Term value="TODO()" definition="In Kotlin, TODO() is a function that throws a 'NotImplementedError' exception, signaling that the code is a placeholder and needs to be implemented." />
                  </list>
                </value>
              </entry>
              <entry key="234722">
                <value>
                  <list>
                    <Term value="Named arguments" definition="Named arguments in Kotlin allow you to explicitly specify the names of parameters when calling a function, making the code more readable and flexible." />
                    <Term value="joinToString" definition="The library function joinToString in Kotlin is used to concatenate elements of a collection into a string with specified separator, prefix, and postfix." />
                  </list>
                </value>
              </entry>
              <entry key="234723">
                <value>
                  <list>
                    <Term value="Default arguments" definition="In Kotlin, Default arguments allow you to define default values for function parameters. If no corresponding argument is passed, the default value is used." />
                  </list>
                </value>
              </entry>
              <entry key="234724">
                <value>
                  <list>
                    <Term value="Lambdas" definition="In Kotlin, a Lambda is an anonymous function that can be treated as a value and passed to functions like 'any'." />
                    <Term value="lambdas" definition="In Kotlin, a Lambda is an anonymous function that can be treated as a value and passed to functions like 'any'." />
                    <Term value="lambda" definition="In Kotlin, a Lambda is an anonymous function that can be treated as a value and passed to functions like 'any'." />
                  </list>
                </value>
              </entry>
              <entry key="234725">
                <value>
                  <list>
                    <Term value="Triple-quoted strings" definition="Triple-quoted strings in Kotlin are useful for multiline strings and regex patterns as they do not require escaping a backslash with a backslash." />
                  </list>
                </value>
              </entry>
              <entry key="234727">
                <value>
                  <list>
                    <Term value="Nullable types" definition="Nullable types in Kotlin allow a variable to hold a null value, ensuring null safety when properly handled." />
                    <Term value="null safety" definition="Null safety in Kotlin is a feature that eliminates null pointer exceptions by using nullable types and safe calls." />
                  </list>
                </value>
              </entry>
              <entry key="234733">
                <value>
                  <list>
                    <Term value="operator overloading" definition="Operator overloading allows defining custom behavior for operations like `==`, `&lt;`, `+` in a language like Kotlin." />
                    <Term value="compareTo" definition="The `compareTo` function is used in Kotlin to make a class comparable, enabling comparisons like `date1 &lt; date2`." />
                  </list>
                </value>
              </entry>
              <entry key="234735">
                <value>
                  <list>
                    <Term value="Ranges" definition="In Kotlin, a range represents a sequence of values defined by a starting and an ending value, inclusive." />
                    <Term value="ranges" definition="In Kotlin, a range represents a sequence of values defined by a starting and an ending value, inclusive." />
                    <Term value="range" definition="In Kotlin, a range represents a sequence of values defined by a starting and an ending value, inclusive." />
                  </list>
                </value>
              </entry>
              <entry key="234736">
                <value>
                  <list>
                    <Term value="For loop" definition="A Kotlin for loop can iterate through any object if the corresponding iterator member or extension function is available." />
                    <Term value="for loop" definition="A Kotlin for loop can iterate through any object if the corresponding iterator member or extension function is available." />
                    <Term value="Iterable&lt;MyDate&gt;" definition="Iterable&lt;MyDate&gt; is an interface in Kotlin that allows an object to be iterated over if implemented by a class." />
                    <Term value="object expression" definition="An object expression in Kotlin plays the same role as an anonymous class in Java, allowing the creation of an object without explicitly declaring a class." />
                  </list>
                </value>
              </entry>
              <entry key="234737">
                <value>
                  <list>
                    <Term value="Operators overloading" definition="The ability in programming to define operators such as +, -, * for user-defined classes or types." />
                    <Term value="extension function" definition="A function that can be defined outside of a class but used as if it were a method of that class." />
                    <Term value="MyDate.addTimeIntervals()" definition="A utility function in `DateUtil.kt` to add time intervals, such as years, weeks, and days, to a date." />
                  </list>
                </value>
              </entry>
              <entry key="234739">
                <value>
                  <list>
                    <Term value="Invoke" definition="In Kotlin, objects with the 'invoke()' method can be called as a function." />
                    <Term value="invoke" definition="In Kotlin, objects with the 'invoke()' method can be called as a function." />
                    <Term value="invoked" definition="In Kotlin, objects with the 'invoke()' method can be called as a function." />
                  </list>
                </value>
              </entry>
              <entry key="234740">
                <value>
                  <list>
                    <Term value="Kotlin standard library" definition="The Kotlin standard library contains lots of extension functions that make working with collections more convenient." />
                    <Term value="toSet" definition="toSet is a function in Kotlin that transforms a collection into a set." />
                    <Term value="toList" definition="toList is a function in Kotlin that transforms a collection into a list." />
                  </list>
                </value>
              </entry>
              <entry key="234742">
                <value>
                  <list>
                    <Term value="All" definition="A Kotlin function that checks if all elements in a collection satisfy the given predicate." />
                    <Term value="all" definition="A Kotlin function that checks if all elements in a collection satisfy the given predicate." />
                    <Term value="Any" definition="A Kotlin function that checks if at least one element in a collection satisfies the given predicate." />
                    <Term value="any" definition="A Kotlin function that checks if at least one element in a collection satisfies the given predicate." />
                    <Term value="count" definition="A Kotlin function that returns the number of elements in a collection that satisfy the given predicate." />
                    <Term value="find" definition="A Kotlin function that returns the first element matching the given predicate, or null if no such element is found." />
                  </list>
                </value>
              </entry>
              <entry key="234743">
                <value>
                  <list>
                    <Term value="FlatMap" definition="In Kotlin, flatMap is a collection transformation function that applies a given transformation to each element of a collection and then flattens the results into a single collection." />
                    <Term value="flatMap" definition="In Kotlin, flatMap is a collection transformation function that applies a given transformation to each element of a collection and then flattens the results into a single collection." />
                  </list>
                </value>
              </entry>
              <entry key="234744">
                <value>
                  <list>
                    <Term value="maxOrNull" definition="A function in Kotlin that returns the largest element in the collection or null if the collection is empty." />
                    <Term value="minOrNull" definition="A function in Kotlin that returns the smallest element in the collection or null if the collection is empty." />
                    <Term value="maxByOrNull" definition="A function in Kotlin that returns the first largest element according to the given comparator function or null if the collection is empty." />
                    <Term value="minByOrNull" definition="A function in Kotlin that returns the first smallest element according to the given comparator function or null if the collection is empty." />
                    <Term value="callable references" definition="In Kotlin, callable references are used to refer to function types, which can be passed as arguments to higher-order functions or used in call chains." />
                  </list>
                </value>
              </entry>
              <entry key="234745">
                <value>
                  <list>
                    <Term value="sortedDescending" definition="A function in Kotlin that returns a list sorted in descending order by its natural order." />
                    <Term value="sortedByDescending" definition="A function in Kotlin that returns a list sorted in descending order based on a specified selector function." />
                  </list>
                </value>
              </entry>
              <entry key="234746">
                <value>
                  <list>
                    <Term value="Sum" definition="The 'sum' function calculates the sum of a collection of numbers in Kotlin." />
                    <Term value="sum" definition="The 'sum' function calculates the sum of a collection of numbers in Kotlin." />
                    <Term value="sumOf" definition="The 'sumOf' function converts elements of a collection to numbers and sums them up in Kotlin." />
                  </list>
                </value>
              </entry>
              <entry key="234747">
                <value>
                  <list>
                    <Term value="Group By" definition="The 'groupBy' function in Kotlin creates a map from a collection, grouping items by the result of a given lambda expression." />
                  </list>
                </value>
              </entry>
              <entry key="234748">
                <value>
                  <list>
                    <Term value="Partition" definition="In Kotlin, Partition is a method used for separating elements of a collection into two lists based on a predicate." />
                    <Term value="partitioning" definition="In Kotlin, Partition is a method used for separating elements of a collection into two lists based on a predicate." />
                    <Term value="partition" definition="In Kotlin, Partition is a method used for separating elements of a collection into two lists based on a predicate." />
                    <Term value="destructuring declaration" definition="Destructuring Declaration in Kotlin is a syntax that allows splitting an object into multiple variables." />
                  </list>
                </value>
              </entry>
              <entry key="234749">
                <value>
                  <list>
                    <Term value="Fold" definition="In Kotlin, the Fold function is a higher-order function that starts with an initial value and accumulates a value by applying a function to each element of a collection." />
                    <Term value="fold" definition="In Kotlin, the Fold function is a higher-order function that starts with an initial value and accumulates a value by applying a function to each element of a collection." />
                    <Term value="reduce" definition="Reduce is a higher-order function in Kotlin that combines elements of a collection using a provided lambda function, without requiring an initial value." />
                    <Term value="intersect" definition="In Kotlin, the Intersect function returns a set containing elements that are common to both this set and the specified collection." />
                  </list>
                </value>
              </entry>
              <entry key="234750">
                <value>
                  <list>
                    <Term value="Order.isDelivered" definition="A flag in Kotlin that indicates whether an order has been delivered." />
                    <Term value="Customer.getOrderedProducts()" definition="A function in Kotlin used to retrieve the list of products ordered by a customer." />
                  </list>
                </value>
              </entry>
              <entry key="234751">
                <value>
                  <list>
                    <Term value="lambdas" definition="A lambda is an anonymous function in Kotlin that can be passed as a parameter or returned as a value." />
                    <Term value="collections" definition="In Kotlin, Collections represent a group of data structures such as lists, sets, and maps used for storing groups of objects." />
                    <Term value="collection" definition="In Kotlin, Collections represent a group of data structures such as lists, sets, and maps used for storing groups of objects." />
                    <Term value="Collection" definition="In Kotlin, Collections represent a group of data structures such as lists, sets, and maps used for storing groups of objects." />
                  </list>
                </value>
              </entry>
              <entry key="234753">
                <value>
                  <list>
                    <Term value="Lazy property" definition="A lazy property is a property that is initialized only once, on its first access. The initialization is performed by invoking a specified function, such as `initializer()`." />
                    <Term value="custom getter" definition="A custom getter is a user-defined method in property declaration used to control the logic for fetching the property value." />
                  </list>
                </value>
              </entry>
              <entry key="234754">
                <value>
                  <list>
                    <Term value="delegated properties" definition="Delegated properties in Kotlin allow the delegation of property getter and setter methods to another object." />
                  </list>
                </value>
              </entry>
              <entry key="234755">
                <value>
                  <list>
                    <Term value="Delegates" definition="Delegates in Kotlin allow you to delegate the implementation of a property to another object." />
                    <Term value="delegates" definition="Delegates in Kotlin allow you to delegate the implementation of a property to another object." />
                    <Term value="delegate" definition="Delegates in Kotlin allow you to delegate the implementation of a property to another object." />
                    <Term value="extension functions" definition="Extension functions in Kotlin are functions that extend the functionality of an existing class without modifying its source code." />
                  </list>
                </value>
              </entry>
              <entry key="234756">
                <value>
                  <list>
                    <Term value="Function literals with receiver" definition="In Kotlin, function literals with receiver allow you to call functions on a receiver object just like extension functions." />
                    <Term value="function literals with receiver" definition="In Kotlin, function literals with receiver allow you to call functions on a receiver object just like extension functions." />
                    <Term value="extension functions" definition="In Kotlin, extension functions allow you to add functionality to classes without modifying their source code." />
                  </list>
                </value>
              </entry>
              <entry key="234757">
                <value>
                  <list>
                    <Term value="Function literals with receiver" definition="In Kotlin, function literals with receiver allow the function to act as if it is an extension function of a specific type, enabling builder-style DSL creation." />
                    <Term value="StringBuilder" definition="StringBuilder is a mutable sequence of characters used in Kotlin to build strings more efficiently by avoiding multiple string concatenations." />
                    <Term value="stringBuilder" definition="StringBuilder is a mutable sequence of characters used in Kotlin to build strings more efficiently by avoiding multiple string concatenations." />
                    <Term value="buildString" definition="A Kotlin function that builds a string using a provided lambda receiver of type StringBuilder." />
                    <Term value="buildMap" definition="A Kotlin function, introduced in standard library version 1.3.70, for creating and building maps using a lambda receiver." />
                  </list>
                </value>
              </entry>
              <entry key="234758">
                <value>
                  <list>
                    <Term value="apply" definition="The apply function in Kotlin is a library function that allows you to configure an object and return it using a lambda block." />
                    <Term value="scope functions" definition="In Kotlin, scope functions such as apply, let, run, with, and also provide a way to execute a code block within the context of an object." />
                  </list>
                </value>
              </entry>
              <entry key="234760">
                <value>
                  <list>
                    <Term value="lambda" definition="A function literal, or 'lambda', is a block of code that can be passed as an argument to higher-order functions." />
                    <Term value="receiver parameter" definition="In Kotlin, the receiver parameter refers to the context object of a function literal or extension function." />
                  </list>
                </value>
              </entry>
              <entry key="234761">
                <value>
                  <list>
                    <Term value="Generic functions" definition="Generic functions are functions that are written with a generic type parameter, allowing them to operate on different data types while maintaining type safety." />
                    <Term value="generic functions" definition="Generic functions are functions that are written with a generic type parameter, allowing them to operate on different data types while maintaining type safety." />
                  </list>
                </value>
              </entry>
              <entry key="963306">
                <value>
                  <list>
                    <Term value="data classes" definition="In Kotlin, data classes are used to hold data. By adding the 'data' modifier to a class, the compiler automatically generates utility methods such as 'equals', 'hashCode', 'toString', and others." />
                    <Term value="toString" definition="In Kotlin, the 'toString' method is automatically generated for data classes to provide a string representation of the class's data." />
                  </list>
                </value>
              </entry>
              <entry key="963307">
                <value>
                  <list>
                    <Term value="Smart casts" definition="In Kotlin, smart casts allow you to automatically cast a variable to a desired type if it passes a type check, enabling more concise and safer code." />
                    <Term value="smart casts" definition="In Kotlin, smart casts allow you to automatically cast a variable to a desired type if it passes a type check, enabling more concise and safer code." />
                  </list>
                </value>
              </entry>
              <entry key="963309">
                <value>
                  <list>
                    <Term value="Rename on import" definition="In Kotlin, you can specify a different name for a class or function during import by using 'as NewName' after the import directive. This helps when using classes or functions with similar names from different libraries." />
                  </list>
                </value>
              </entry>
              <entry key="963310">
                <value>
                  <list>
                    <Term value="Extension functions" definition="Extension functions in Kotlin allow developers to extend a class with new functionalities without modifying the original class." />
                    <Term value="extension functions" definition="Extension functions in Kotlin allow developers to extend a class with new functionalities without modifying the original class." />
                    <Term value="Pair" definition="Pair is a class in Kotlin's standard library that holds two values, accessible via 'first' and 'second' properties." />
                  </list>
                </value>
              </entry>
              <entry key="963311">
                <value>
                  <list>
                    <Term value="trimIndent" definition="A Kotlin library function used to format multiline triple-quoted strings by removing leading whitespace." />
                    <Term value="trimMargin" definition="A Kotlin library function used to format multiline triple-quoted strings by removing leading whitespace, with an optional prefix character for margin." />
                  </list>
                </value>
              </entry>
              <entry key="963312">
                <value>
                  <list>
                    <Term value="Nothing type" definition="In Kotlin, Nothing type can be used as a return type for a function that always throws an exception. When such a function is called, the compiler uses the information that the execution doesn't continue beyond the function." />
                  </list>
                </value>
              </entry>
              <entry key="963313">
                <value>
                  <list>
                    <Term value="associateBy" definition="associateBy is a Kotlin function that builds a map from the elements of a collection using a key selector function to determine the keys." />
                    <Term value="associateWith" definition="associateWith is a Kotlin function that builds a map from the elements of a collection using a value selector function to determine the values." />
                    <Term value="Associate" definition="associate is a Kotlin function that builds a map from the elements of a collection by transforming each element into a key-value pair." />
                    <Term value="associate" definition="associate is a Kotlin function that builds a map from the elements of a collection by transforming each element into a key-value pair." />
                  </list>
                </value>
              </entry>
            </map>
          </value>
        </entry>
      </map>
    </terms>
    <termsVersions>
      <map>
        <entry key="en" value="3" />
      </map>
    </termsVersions>
  </component>
</project>